name: Build

on: push

jobs:
  build:
    name: ${{ matrix.config.name }} SCALAR_DOUBLE=${{ matrix.scalar_double }}
    runs-on: ${{ matrix.config.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    strategy:
      fail-fast: false
      matrix:
        scalar_double: ["OFF", "ON"]
        config:
          - {
              name: "macOS Clang",
              os: macos-latest,
              generator: "Ninja",
            }
          - {
              name: "Ubuntu GCC",
              os: ubuntu-latest,
              generator: "Ninja",
            }
          - {
              name: "Windows MSVC",
              os: windows-latest,
              generator: "Ninja",
           }

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: |
          brew install cgal ninja qt5 tbb

          echo "::set-env name=Qt5_DIR::/usr/local/opt/qt5/lib/cmake/Qt5"

      - name: Install Dependencies (Ubuntu)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update

          sudo apt-get install -y libcgal-dev libtbb-dev ninja-build qtbase5-dev

      - name: Conda Cache (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: actions/cache@v1
        with:
          path: C:\Miniconda3\envs\CCCoreLib
          key: conda-cache-${{ runner.os }}-${{ hashFiles('.ci/conda.yml') }}

      - name: Install Dependencies (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: CCCoreLib
          auto-activate-base: false
          environment-file: .ci/conda.yml
          channels: conda-forge
          miniconda-version: 'latest'

      - name: Configure MSVC console (Windows)
        if:  matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set environment for MSVC (Windows)
        if:  matrix.config.os == 'windows-latest'
        run: |
          # Set these env vars so cmake picks the correct compiler
          echo "::set-env name=CXX::cl.exe"
          echo "::set-env name=CC::cl.exe"

      - name: Configure
        run: >
          mkdir cccorelib-build

          cmake
          -B cccorelib-build
          -G "${{ matrix.config.generator }}"
          -DCMAKE_BUILD_TYPE=Release
          -DCC-CORE-LIB_USE_CGAL=TRUE
          -DCC-CORE-LIB_USE_TBB=TRUE
          -DCC-CORE-LIB_SCALAR_DOUBLE=${{ matrix.scalar_double }}
          .

      - name: Build
        run: |
          cmake --build cccorelib-build --config Release
